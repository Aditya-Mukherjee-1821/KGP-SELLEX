{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from './TabRouter';\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n};\nexport default function DrawerRouter(_ref) {\n  let {\n    defaultStatus = 'closed',\n    ...rest\n  } = _ref;\n  const router = TabRouter(rest);\n  const isDrawerInHistory = state => {\n    var _state$history;\n    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(it => it.type === 'drawer'));\n  };\n  const addDrawerToHistory = state => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n    return {\n      ...state,\n      history: [...state.history, {\n        type: 'drawer',\n        status: defaultStatus === 'open' ? 'closed' : 'open'\n      }]\n    };\n  };\n  const removeDrawerFromHistory = state => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n    return {\n      ...state,\n      history: state.history.filter(it => it.type !== 'drawer')\n    };\n  };\n  const openDrawer = state => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n    return addDrawerToHistory(state);\n  };\n  const closeDrawer = state => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n    return removeDrawerFromHistory(state);\n  };\n  return {\n    ...router,\n    type: 'drawer',\n    getInitialState(_ref2) {\n      let {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      } = _ref2;\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      };\n    },\n    getRehydratedState(partialState, _ref3) {\n      let {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      } = _ref3;\n      if (partialState.stale === false) {\n        return partialState;\n      }\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      };\n    },\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n          return addDrawerToHistory(state);\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            const result = router.getStateForAction(state, action, options);\n            if (result != null && result.index !== state.index) {\n              return closeDrawer(result);\n            }\n            return result;\n          }\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n          return router.getStateForAction(state, action, options);\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  };\n}","map":{"version":3,"names":["nanoid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","_ref","defaultStatus","rest","router","isDrawerInHistory","state","_state$history","Boolean","history","some","it","addDrawerToHistory","status","removeDrawerFromHistory","filter","getInitialState","_ref2","routeNames","routeParamList","routeGetIdList","default","stale","key","getRehydratedState","partialState","_ref3","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"sources":["DrawerRouter.tsx"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}