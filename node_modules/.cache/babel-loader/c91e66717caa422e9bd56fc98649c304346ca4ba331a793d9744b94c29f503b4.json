{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nconst TYPE_ROUTE = 'route';\nexport const TabActions = {\n  jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name,\n        params\n      }\n    };\n  }\n};\nconst getRouteHistory = (routes, index, backBehavior, initialRouteName) => {\n  const history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  let initialRouteIndex;\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(route => route.name === initialRouteName);\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n  return history;\n};\nconst changeIndex = (state, index, backBehavior, initialRouteName) => {\n  let history;\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n    history = state.history.filter(it => it.type === 'route' ? it.key !== currentKey : false).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n  return {\n    ...state,\n    index,\n    history\n  };\n};\nexport default function TabRouter(_ref) {\n  let {\n    initialRouteName,\n    backBehavior = 'firstRoute'\n  } = _ref;\n  const router = {\n    ...BaseRouter,\n    type: 'tab',\n    getInitialState(_ref2) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref2;\n      const index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      const routes = routeNames.map(name => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name]\n      }));\n      const history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes\n      };\n    },\n    getRehydratedState(partialState, _ref3) {\n      var _state$routes, _state$history;\n      let {\n        routeNames,\n        routeParamList\n      } = _ref3;\n      let state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      const routes = routeNames.map(name => {\n        const route = state.routes.find(r => r.name === name);\n        return {\n          ...route,\n          name,\n          key: route && route.name === name && route.key ? route.key : `${name}-${nanoid()}`,\n          params: routeParamList[name] !== undefined ? {\n            ...routeParamList[name],\n            ...(route ? route.params : undefined)\n          } : route ? route.params : undefined\n        };\n      });\n      const index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(state === null || state === void 0 ? void 0 : state.index) ?? 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      const history = ((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(it => routes.find(r => r.key === it.key))) ?? [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes\n      }, index, backBehavior, initialRouteName);\n    },\n    getStateForRouteNamesChange(state, _ref4) {\n      let {\n        routeNames,\n        routeParamList,\n        routeKeyChanges\n      } = _ref4;\n      const routes = routeNames.map(name => state.routes.find(r => r.name === name && !routeKeyChanges.includes(r.name)) || {\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name]\n      });\n      const index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      let history = state.history.filter(\n      // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n      it => it.type !== 'route' || routes.find(r => r.key === it.key));\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index\n      };\n    },\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction(state, action, _ref5) {\n      let {\n        routeParamList,\n        routeGetIdList\n      } = _ref5;\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            let index = -1;\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(route => route.key === action.payload.key);\n            } else {\n              index = state.routes.findIndex(route => route.name === action.payload.name);\n            }\n            if (index === -1) {\n              return null;\n            }\n            return changeIndex({\n              ...state,\n              routes: state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n                const getId = routeGetIdList[route.name];\n                const currentId = getId === null || getId === void 0 ? void 0 : getId({\n                  params: route.params\n                });\n                const nextId = getId === null || getId === void 0 ? void 0 : getId({\n                  params: action.payload.params\n                });\n                const key = currentId === nextId ? route.key : `${route.name}-${nanoid()}`;\n                let params;\n                if (action.type === 'NAVIGATE' && action.payload.merge && currentId === nextId) {\n                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? {\n                    ...routeParamList[route.name],\n                    ...route.params,\n                    ...action.payload.params\n                  } : route.params;\n                } else {\n                  params = routeParamList[route.name] !== undefined ? {\n                    ...routeParamList[route.name],\n                    ...action.payload.params\n                  } : action.payload.params;\n                }\n                const path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                return params !== route.params || path !== route.path ? {\n                  ...route,\n                  key,\n                  path,\n                  params\n                } : route;\n              })\n            }, index, backBehavior, initialRouteName);\n          }\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n            const previousKey = state.history[state.history.length - 2].key;\n            const index = state.routes.findIndex(route => route.key === previousKey);\n            if (index === -1) {\n              return null;\n            }\n            return {\n              ...state,\n              history: state.history.slice(0, -1),\n              index\n            };\n          }\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n    actionCreators: TabActions\n  };\n  return router;\n}","map":{"version":3,"names":["nanoid","BaseRouter","TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","initialRouteName","history","key","initialRouteIndex","i","unshift","findIndex","route","changeIndex","state","currentKey","filter","it","concat","TabRouter","_ref","router","getInitialState","_ref2","routeNames","routeParamList","undefined","includes","indexOf","map","stale","getRehydratedState","partialState","_ref3","_state$routes","_state$history","find","r","Math","min","max","length","getStateForRouteNamesChange","_ref4","routeKeyChanges","getStateForRouteFocus","getStateForAction","action","_ref5","routeGetIdList","getId","currentId","nextId","merge","path","previousKey","slice","shouldActionChangeFocus","actionCreators"],"sources":["D:/WebD/React/Selling Platform/kgpsellex/node_modules/@react-navigation/routers/lib/module/TabRouter.js"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nconst TYPE_ROUTE = 'route';\nexport const TabActions = {\n  jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name,\n        params\n      }\n    };\n  }\n};\nconst getRouteHistory = (routes, index, backBehavior, initialRouteName) => {\n  const history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  let initialRouteIndex;\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(route => route.name === initialRouteName);\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n  return history;\n};\nconst changeIndex = (state, index, backBehavior, initialRouteName) => {\n  let history;\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n    history = state.history.filter(it => it.type === 'route' ? it.key !== currentKey : false).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n  return {\n    ...state,\n    index,\n    history\n  };\n};\nexport default function TabRouter(_ref) {\n  let {\n    initialRouteName,\n    backBehavior = 'firstRoute'\n  } = _ref;\n  const router = {\n    ...BaseRouter,\n    type: 'tab',\n    getInitialState(_ref2) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref2;\n      const index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      const routes = routeNames.map(name => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name]\n      }));\n      const history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes\n      };\n    },\n    getRehydratedState(partialState, _ref3) {\n      var _state$routes, _state$history;\n      let {\n        routeNames,\n        routeParamList\n      } = _ref3;\n      let state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      const routes = routeNames.map(name => {\n        const route = state.routes.find(r => r.name === name);\n        return {\n          ...route,\n          name,\n          key: route && route.name === name && route.key ? route.key : `${name}-${nanoid()}`,\n          params: routeParamList[name] !== undefined ? {\n            ...routeParamList[name],\n            ...(route ? route.params : undefined)\n          } : route ? route.params : undefined\n        };\n      });\n      const index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(state === null || state === void 0 ? void 0 : state.index) ?? 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      const history = ((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(it => routes.find(r => r.key === it.key))) ?? [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes\n      }, index, backBehavior, initialRouteName);\n    },\n    getStateForRouteNamesChange(state, _ref4) {\n      let {\n        routeNames,\n        routeParamList,\n        routeKeyChanges\n      } = _ref4;\n      const routes = routeNames.map(name => state.routes.find(r => r.name === name && !routeKeyChanges.includes(r.name)) || {\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name]\n      });\n      const index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      let history = state.history.filter(\n      // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n      it => it.type !== 'route' || routes.find(r => r.key === it.key));\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index\n      };\n    },\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction(state, action, _ref5) {\n      let {\n        routeParamList,\n        routeGetIdList\n      } = _ref5;\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            let index = -1;\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(route => route.key === action.payload.key);\n            } else {\n              index = state.routes.findIndex(route => route.name === action.payload.name);\n            }\n            if (index === -1) {\n              return null;\n            }\n            return changeIndex({\n              ...state,\n              routes: state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n                const getId = routeGetIdList[route.name];\n                const currentId = getId === null || getId === void 0 ? void 0 : getId({\n                  params: route.params\n                });\n                const nextId = getId === null || getId === void 0 ? void 0 : getId({\n                  params: action.payload.params\n                });\n                const key = currentId === nextId ? route.key : `${route.name}-${nanoid()}`;\n                let params;\n                if (action.type === 'NAVIGATE' && action.payload.merge && currentId === nextId) {\n                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? {\n                    ...routeParamList[route.name],\n                    ...route.params,\n                    ...action.payload.params\n                  } : route.params;\n                } else {\n                  params = routeParamList[route.name] !== undefined ? {\n                    ...routeParamList[route.name],\n                    ...action.payload.params\n                  } : action.payload.params;\n                }\n                const path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                return params !== route.params || path !== route.path ? {\n                  ...route,\n                  key,\n                  path,\n                  params\n                } : route;\n              })\n            }, index, backBehavior, initialRouteName);\n          }\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n            const previousKey = state.history[state.history.length - 2].key;\n            const index = state.routes.findIndex(route => route.key === previousKey);\n            if (index === -1) {\n              return null;\n            }\n            return {\n              ...state,\n              history: state.history.slice(0, -1),\n              index\n            };\n          }\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n    actionCreators: TabActions\n  };\n  return router;\n}\n//# sourceMappingURL=TabRouter.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}